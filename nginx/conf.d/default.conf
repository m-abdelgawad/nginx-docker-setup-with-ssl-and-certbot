# Global DNS resolver for Docker's embedded DNS
resolver 127.0.0.11 valid=30s;

# --- Consolidated Bot / crawler detection (http context) ---
# This single map block determines the value of $is_bot.
map $http_user_agent $user_agent_is_bot {
    default 0;
    # Major Search Engines
    ~*(googlebot|adsbot-google|bingbot|yandex|baiduspider|duckduckbot|slurp) 1;
    # Social Media Crawlers
    ~*(facebookexternalhit|facebookcatalog|twitterbot|linkedinbot|pinterest|slackbot|discordbot|whatsapp|telegram) 1;
    # SEO/Analysis Tools
    ~*(ahrefsbot|semrushbot|mj12bot|dotbot|petalbot) 1;
    # Monitoring/Uptime
    ~*(uptimerobot|uptimebot|monitoring|probe) 1;
    # Headless Browsers & Automation (often used by services)
    ~*(headlesschrome|headless|phantomjs|selenium|puppeteer) 1;
    # Generic
    ~*(crawler|spider|bot|fetcher|scraper) 1;
}

# <<< FIX: START - Revised E2E Bot Classification Logic >>>
# This new map correctly differentiates between an E2E human test and an E2E bot test.
# It ensures that a request with a bot-like User-Agent is ALWAYS treated as a bot,
# even if the X-Is-Test header is present.
map "$http_x_is_test:$user_agent_is_bot" $is_bot_final {
    "true:1" 1;    # E2E Bot: Is a test AND has a bot UA => BOT
    "true:0" 0;    # E2E Human: Is a test AND has a human UA => HUMAN
    default  $user_agent_is_bot; # For ALL other traffic (real humans/bots), just use the UA check.
}
# <<< FIX: END >>>


# ─── portfolio-frontend-public (SPA) ────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    set $backend portfolio-frontend-public;

    # SSL and performance snippets
    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    # <<< FIX: Comment out the line causing the crash >>>
    # include /etc/nginx/conf.d/snippets/security_headers.conf;


    location / {
        # Check for bot user agents.
        # This is the primary routing logic for SEO.
        if ($is_bot_final = 1) {
            # Bot traffic: proxy to prerender service
            proxy_pass http://prerender:3000;

            # Set headers for prerender service
            proxy_set_header X-Prerender-Url $scheme://$host$request_uri;
            proxy_set_header X-Original-User-Agent $http_user_agent;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Language $http_accept_language;
            proxy_set_header Referer $http_referer;

            # Prevent Nginx from intercepting errors from the prerender service
            proxy_intercept_errors off;
            break;
        }

        # Human traffic (or bots that should be treated as human, like E2E tests)
        # Proxy to the Vite dev server / frontend container
        proxy_pass http://$backend:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }

    # API traffic
    location /api/ {
        set $backend portfolio-backend;
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }

    # Static assets (direct serving)
    location ~* \.(?:css|js|woff2|png|jpg|jpeg|gif|ico|svg)$ {
        set $backend portfolio-frontend-public;
        proxy_pass http://$backend:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        expires 1y;
        add_header Cache-Control "public";
    }
}


# ─── lite-llm API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name litellm.automagicdeveloper.com;

    set $backend lite-llm-api;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ─── wallet-scraper API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name walletscraper.automagicdeveloper.com;

    set $backend walletscraper;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ─── egypt-gold-tracker API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name egypt-gold-tracker.automagicdeveloper.com;

    set $backend egypt-gold-tracker-api;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
    }
}