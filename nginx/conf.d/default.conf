# Global DNS resolver for Dockerâ€™s embedded DNS
resolver 127.0.0.11 valid=30s;

# --- Bot / crawler detection (http context) ---
# This list is now synchronized with the backend bot detector for consistency.
# Add a check for the custom test header to explicitly ignore test traffic
map $http_user_agent $is_crawler {
    default 0;
    "~*playwright" 1;
    # Major Search Engines
    ~*(googlebot|adsbot-google|bingbot|yandex|baiduspider|duckduckbot|slurp) 1;
    # Social Media Crawlers
    ~*(facebookexternalhit|facebookcatalog|twitterbot|linkedinbot|pinterest|slackbot|discordbot|whatsapp|telegram) 1;
    # SEO/Analysis Tools
    ~*(ahrefsbot|semrushbot|mj12bot|dotbot|petalbot) 1;
    # Monitoring/Uptime
    ~*(uptimerobot|uptimebot|monitoring|probe) 1;
    # Headless Browsers & Automation (often used by services)
    ~*(headlesschrome|headless|phantomjs|selenium|puppeteer) 1;
    # Generic
    ~*(crawler|spider|bot|fetcher|scraper) 1;
}


# ----------------------------------------------------------------------
# 1. Redirect everything on :80 to HTTPS
# ----------------------------------------------------------------------
server {
    listen 80;
    server_name automagicdeveloper.com www.automagicdeveloper.com
                admin.automagicdeveloper.com
                replicabot.automagicdeveloper.com
                aistoreassistant.automagicdeveloper.com
                lifehub.automagicdeveloper.com
                enjaz.automagicdeveloper.com
                myreads.automagicdeveloper.com
                polarity.automagicdeveloper.com
                clientnest.automagicdeveloper.com
                n8n.automagicdeveloper.com;
    return 301 https://$host$request_uri;
}

# ----------------------------------------------------------------------
# 2. Automagic Developer Portfolio SPA (Public)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # Docker service names
    set $fe portfolio-frontend-public;
    set $api portfolio-backend;
    set $prerender_service prerender;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    # --- SEO/Sitemap Routes (MUST come before other locations) ---
    location = /robots.txt {
        proxy_pass http://$api:8000/robots.txt;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        add_header Cache-Control "public, max-age=86400";
    }

    location = /sitemap.xml {
        proxy_pass http://$api:8000/sitemap.xml;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        add_header Cache-Control "public, max-age=3600";
    }

    location ~ ^/(sitemap-.*\.xml)$ {
        proxy_pass http://$api:8000/$1;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        add_header Cache-Control "public, max-age=3600";
    }

    # Media files (served directly by Nginx from shared volume)
    location ^~ /media/ {
        root /var/www;
        expires 30d;
        add_header Cache-Control "public";
        access_log off;
        try_files $uri =404;
    }

    # Cache static assets generated by Vite
    location /assets/ {
        proxy_pass http://$fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Cache logo and other static files at root
    location = /logo.png {
        proxy_pass http://$fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }

    # Cache other static files (served by FE)
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|otf|eot)$ {
        proxy_pass http://$fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # ---------- JSON API (FastAPI root_path=/api) ----------
    location ^~ /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$api:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;

        proxy_set_header X-Original-User-Agent $http_x_original_user_agent;
        proxy_set_header X-Is-Bot $http_x_is_bot;

        client_max_body_size 10M;
    }

    # ---------- SPA ROOT (prerender support) ----------
    location / {
        # --- Prerender Logic ---
        set $prerender 0;
        if ($http_x_is_test) { set $prerender 0; } # Explicitly bypass prerender for e2e tests
        if ($is_crawler = 1) { set $prerender 1; }
        if ($arg__prerender = 1) { set $prerender 1; }
        if ($http_x_prerender) { set $prerender 0; } # prevent loops
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|woff2|svg|eot)$") {
            set $prerender 0;
        }

        add_header X-Prerender-Status $prerender always;

        set $x_prerender      "";
        set $x_prerender_url  "";
        if ($prerender = 1) {
            set $x_prerender 1;
            set $x_prerender_url http://$fe:80$request_uri;
        }

        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_set_header User-Agent              $http_user_agent;
        proxy_set_header X-Original-User-Agent   $http_user_agent;
        proxy_set_header Referer                 $http_referer;
        proxy_set_header Accept-Language         $http_accept_language;
        proxy_set_header Accept-Encoding         "";
        proxy_set_header X-Prerender             $x_prerender;
        proxy_set_header X-Prerender-Url         $x_prerender_url;
        proxy_set_header X-Is-Test               $http_x_is_test; # Pass the test header downstream

        set $upstream_service $fe:80;
        if ($prerender = 1) {
            set $upstream_service $prerender_service:3000;
        }

        proxy_pass http://$upstream_service;
    }

}

# ----------------------------------------------------------------------
# 3. Automagic Developer Portfolio SPA (Admin)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name admin.automagicdeveloper.com;

    # Docker service name
    set $admin_fe portfolio-frontend-admin;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$admin_fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}


# ----------------------------------------------------------------------
# 4. Replicabot
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name replicabot.automagicdeveloper.com;

    set $backend replicabot;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 5. AI Store Assistant (frontend on :8000)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name aistoreassistant.automagicdeveloper.com;

    set $backend aistoreassistant-frontend;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 6. LifeHub
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name lifehub.automagicdeveloper.com;

    set $backend lifehub;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 7. Enjaz
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name enjaz.automagicdeveloper.com;

    set $backend enjaz;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 8. MyReads (separate FE & BE, needs auth header pass-through)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name myreads.automagicdeveloper.com;

    set $myreads_frontend_host myreads-frontend;
    set $myreads_backend_host  myreads-backend;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    # Front-end (React / static)
    location / {
        proxy_pass http://$myreads_frontend_host:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }

    # Back-end API
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$myreads_backend_host:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ----------------------------------------------------------------------
# 9. Polarity
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name polarity.automagicdeveloper.com;

    set $backend polarity;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 10. ClientNest
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name clientnest.automagicdeveloper.com;

    set $backend clientnest;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 11. N8N
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name n8n.automagicdeveloper.com;

    set $app n8n;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$app:5678;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# â”€â”€â”€ lite-llm API â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
server {
    listen 443 ssl;
    http2  on;
    server_name litellm.automagicdeveloper.com;

    set $backend lite-llm-api;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# â”€â”€â”€ wallet-scraper API â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
server {
    listen 443 ssl;
    http2  on;
    server_name walletscraper.automagicdeveloper.com;

    set $backend walletscraper;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# â”€â”€â”€ egypt-gold-tracker API â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
server {
    listen 443 ssl;
    http2  on;
    server_name egypt-gold-tracker.automagicdeveloper.com;

    set $backend egy-gold-tracker-api;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}