# Global DNS resolver for Dockerâ€™s embedded DNS
resolver 127.0.0.11 valid=30s;

# ----------------------------------------------------------------------
# 1.  Redirect everything on :80 to HTTPS
# ----------------------------------------------------------------------
server {
    listen 80;
    server_name automagicdeveloper.com www.automagicdeveloper.com
                replicabot.automagicdeveloper.com
                aistoreassistant.automagicdeveloper.com
                lifehub.automagicdeveloper.com
                enjaz.automagicdeveloper.com
                myreads.automagicdeveloper.com;
    return 301 https://$host$request_uri;
}

# ----------------------------------------------------------------------
# 2. Automagic
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    set $backend automagic;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 3. Replicabot
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name replicabot.automagicdeveloper.com;

    set $backend replicabot;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 4. AI Store Assistant (frontend on :8000)
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name aistoreassistant.automagicdeveloper.com;

    set $backend aistoreassistant-frontend;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 5. LifeHub
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name lifehub.automagicdeveloper.com;

    set $backend lifehub;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 6. Enjaz
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name enjaz.automagicdeveloper.com;

    set $backend enjaz;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 7. MyReads (separate FE & BE, needs auth header pass-through)
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    server_name myreads.automagicdeveloper.com;

    set $myreads_frontend_host myreads-frontend;
    set $myreads_backend_host  myreads-backend;

    include snippets/ssl_base.conf;
    include snippets/performance.conf;

    # Front-end (React / static)
    location / {
        proxy_pass http://$myreads_frontend_host:80;
        include snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }

    # Back-end API
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$myreads_backend_host:8000;
        include snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}
