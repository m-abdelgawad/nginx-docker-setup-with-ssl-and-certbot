# Global DNS resolver for Docker’s embedded DNS
resolver 127.0.0.11 valid=30s;

# ----------------------------------------------------------------------
# 1. Redirect everything on :80 to HTTPS
# ----------------------------------------------------------------------
server {
    listen 80;
    server_name automagicdeveloper.com www.automagicdeveloper.com
                replicabot.automagicdeveloper.com
                aistoreassistant.automagicdeveloper.com
                lifehub.automagicdeveloper.com
                enjaz.automagicdeveloper.com
                myreads.automagicdeveloper.com
                polarity.automagicdeveloper.com
                clientnest.automagicdeveloper.com
                n8n.automagicdeveloper.com;
    return 301 https://$host$request_uri;
}

# ----------------------------------------------------------------------
# 2. Automagic Developer Portfolio SPA
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # Docker service names
    set $fe portfolio-frontend;
    set $api portfolio-backend;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    # Media files (served directly by nginx)
    location /media/ {
        alias /var/www/portfolio/media/;
        expires 30d;
        add_header Cache-Control "public, immutable";

        # Security headers for uploaded content
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # Allow images to be displayed
        add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:;";
    }

    # Cache static assets generated by Vite
    location /assets/ {
        proxy_pass http://$fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Static SPA (root)
    location / {
        proxy_pass http://$fe:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }

    # JSON API
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;   # strip /api/ before proxying
        proxy_pass http://$api:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;   # keep JWT / session cookies
        proxy_set_header Authorization $http_authorization;

        # Increase body size for file uploads
        client_max_body_size 10M;
    }
}


# ----------------------------------------------------------------------
# 3. Replicabot
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name replicabot.automagicdeveloper.com;

    set $backend replicabot;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 4. AI Store Assistant (frontend on :8000)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name aistoreassistant.automagicdeveloper.com;

    set $backend aistoreassistant-frontend;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 5. LifeHub
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name lifehub.automagicdeveloper.com;

    set $backend lifehub;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 6. Enjaz
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name enjaz.automagicdeveloper.com;

    set $backend enjaz;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 7. MyReads (separate FE & BE, needs auth header pass-through)
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name myreads.automagicdeveloper.com;

    set $myreads_frontend_host myreads-frontend;
    set $myreads_backend_host  myreads-backend;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    # Front-end (React / static)
    location / {
        proxy_pass http://$myreads_frontend_host:80;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }

    # Back-end API
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$myreads_backend_host:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ----------------------------------------------------------------------
# 8. Polarity
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name polarity.automagicdeveloper.com;

    set $backend polarity;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 9. ClientNest
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name clientnest.automagicdeveloper.com;

    set $backend clientnest;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
    }
}

# ----------------------------------------------------------------------
# 10. N8N
# ----------------------------------------------------------------------
server {
    listen 443 ssl;
    http2  on;
    server_name n8n.automagicdeveloper.com;

    set $app n8n;

    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$app:5678;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;

        # These 2 lines are required for WebSockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# ─── lite-llm API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name litellm.automagicdeveloper.com;

    # Docker‑DNS name of the container *defined in docker‑compose.yml*
    set $backend lite-llm-api;

    # Shared directives
    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        # optional: auth header pass‑through
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ─── wallet-scraper API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name walletscraper.automagicdeveloper.com;

    # Docker‑DNS name of the container *defined in docker‑compose.yml*
    set $backend walletscraper;

    # Shared directives
    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        # optional: auth header pass‑through
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}

# ─── egypt-gold-tracker API ─────────────────────────────
server {
    listen 443 ssl;
    http2  on;
    server_name egypt-gold-tracker.automagicdeveloper.com;

    # Docker‑DNS name of the container *defined in docker‑compose.yml*
    set $backend egy-gold-tracker-api;

    # Shared directives
    include /etc/nginx/conf.d/snippets/ssl_base.conf;
    include /etc/nginx/conf.d/snippets/performance.conf;

    location / {
        proxy_pass http://$backend:8000;
        include /etc/nginx/conf.d/snippets/proxy_headers.conf;
        # optional: auth header pass‑through
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
    }
}
